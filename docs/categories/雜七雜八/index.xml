<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>雜七雜八 on David&#39;s Blog</title>
    <link>/categories/%E9%9B%9C%E4%B8%83%E9%9B%9C%E5%85%AB/</link>
    <description>Recent content in 雜七雜八 on David&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 31 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/%E9%9B%9C%E4%B8%83%E9%9B%9C%E5%85%AB/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker Note (Nginx&#43;uwsgi&#43;Letsencrypt)</title>
      <link>/blog/2017-08-31-docker-note/</link>
      <pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-08-31-docker-note/</guid>
      <description>docker筆記    nginx+uwsgi+flask+letsencrypt    Env: Python3    Line串接API使用，需執行crontab更新憑證(簽署期限為30天)       note:    certbot-auto可單一clone此檔案就好    產生憑證： (docker裡執行)  certbot-auto certonly --webroot --webroot-path=WEB_ROOT -d DOMAIN_NAME    更新憑證：&amp;nbsp;  docker exec -it CONTAINER_ID /opt/letsencrypt/certbot-auto renew --quiet --renew-hook &#34;/etc/init.d/nginx restart&#34;    啟動程序：&amp;nbsp;  docker run -p 80:80 -p 443:443 CONTAINER_ID /opt/start. &amp;amp;     /opt/start.</description>
    </item>
    
    <item>
      <title>AI人工智慧講座筆記</title>
      <link>/blog/2017-07-23-ai-venue/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-07-23-ai-venue/</guid>
      <description>今天聽了願景工程主辦的AI講座
最吸引我想去的就是可以聽到創世神 杜奕瑾 分享他的經驗
杜奕瑾是誰呢 相信各位鄉民應該不陌生
他在1995年架設PTT這個到現在唯一存活的BBS
此外他也架設蕃薯藤(小時候的回憶啊～)並成立公司
蕃薯藤不為人知的是
他是當時第一個做出中文搜尋的search engine
之後杜奕瑾先生到了美國衛生研究院做基因分析研究
然後到了微軟做Bing搜尋引擎
直到最近熟為人之的微軟Cortana也是他一手策劃的 鄉民稱他為Cortana之父
那正當AI如日中天的時候他居然選擇離開微軟回到台灣成立AI Lab
傻了嗎？我也不知道
原來是他覺得台灣在各方面都非常具有優勢
但就是沒有人敢去整合 於是他決定要拋磚引玉
回到台灣成立AI Lab 以國外的薪資邀請一等人才共同努力
因為台灣對於軟體人才的薪資實在令人心酸
所以他決定以國外的標準來留下人才
當然也提到大家相當關注的軟體思維以及硬體思維
如果大家有在follow國外的programmer應該不難發現國外沒有硬體
不信的話列舉前幾大資訊產業 全都是軟體產業
Microsoft , Google , Facebook &amp;hellip;等等
唯獨台灣有軟體產業 也有硬體產業
但要如何做一個完美結合，就有待時間證明了
我反思的是他提到的國外都是軟體的世界
流行的是Full stack engineer 全端工程師
像我這種做系統管理的我想應該也很快會不再需要
AWS已經推出Lamda 應該不難發現這個趨勢
這大概也是我最近狂寫python的原因
強迫自己拋棄bash shell
當然Linux還是要懂 只是不在需要一個人專門管理
應該走敏捷開發 一個人負責一小塊(cell)
那一小塊裡包含所有東西
從系統到後端程式到前端都由一個team負責
以需求及系統來劃分部門而不是切割軟硬體
part2.
而AI對我們產業會帶來什麼衝擊？ 我在未來會被取代嗎？
其實AI遠比我們想的要廣泛
AI未來不只是AI，更是結合IoT成為AIoT進到我們的生活中
你覺得只有專業攝影師拍得出來的照片
AI經過學習(machine learning or deep learning)之後可以做得比人還好
舉個例子
出國要過海關為什麼自動通關可以被信賴？</description>
    </item>
    
    <item>
      <title>Python發送警告訊息(Nagios &amp; Dingtalk)</title>
      <link>/blog/2017-07-08-python-nagios-dingtalk/</link>
      <pubDate>Sat, 08 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-07-08-python-nagios-dingtalk/</guid>
      <description>退伍已經過了一個多月，生活漸漸步入軌道
狂寫python練技術，卻有點不知道目標是什麼
為了技術，有的人願意放棄80k月薪
不禁讓我思考，出社會後如此庸庸碌碌真的是我要的生活嗎
每天沈浸在程式海中，最後想得到什麼呢？
我想得到的到底是技術還是高薪，如果兩者取其重，我會選哪個？
人生真難阿
因應最近公司SAP簡訊系統故障，業務又不回信
只好利用原本Nagios發警告簡訊的機制去寫一個新程式發送警告訊息
雖然還是不懂為何公司要用釘釘，既不安全也不可靠，或許這就是cost down的副作用吧
程式放在github上
原理是透過原本簡訊的log去抓關鍵字來發送訊息
然後透過釘釘oapi用POST去發送消息
或許將來哪天Nagios不用了，這程式也就失效了，未來可能需要再修正。
&#34;&#34;&#34; * Nagios Alert Message SMS to Dingtalk *  * @author David * Version 1.0 , 2017-06-23 &#34;&#34;&#34; # !/usr/bin/env python3 import re import time , datetime import requests import json  由於nagios admin可以收到全部alert SMS，為了不重複發送訊息，只取這一筆num # nagios admin&#39;s phone number nagios_admin_num = &#34;09&#34; # David  # read sms_service log file f = open(&#39;D:\david_hsu\Desktop\message.txt&#39;,&#39;r&#39;) line = f.</description>
    </item>
    
    <item>
      <title>Python套件urllib2簡介</title>
      <link>/blog/2017-02-05-urllib2-intro/</link>
      <pubDate>Sun, 05 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-02-05-urllib2-intro/</guid>
      <description>這裡就像哈利波特裡的儲思盆
趁著我在當兵前還沒完全放空的時候
把這些東西倒出來
還以為我會很緊張要當兵了
沒想到居然心如止水 來講講一個小套件
今天講Python的一個小小小小套件 , urllib2
基本上不需要額外安裝任何新的module就可以使用，所以用來救急很方便
當有時候需要使用程式對某一網頁做POST或GET並獲得response時
使用urllib2就非常方便
簡單的幾行程式碼就可以搞定
範例程式如下：
我們對google首頁做GET
/usr/bin/env python
 encoding: utf-8
 
import urllib2
request = urllib2.Request(&amp;ldquo;http://www.google.com.tw/&amp;quot;)
response = urllib2.urlopen(request)
html = response.read()
print html
去執行python 程式名稱就可以看到GET網頁的內容了
非常簡單且快速
用來撈取資料或做POST、GET都很方便
當然，你也可以使用linux環境下的wget、curl等套件來達成。
因為腦袋放太空不適合一次寫太多東西
就先這樣好了
2017-02-05 12:46 , Davin in Taipei  </description>
    </item>
    
    <item>
      <title>Linux指令 - ln 慘痛的教訓</title>
      <link>/blog/2017-01-25-linux-ln-exp/</link>
      <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-01-25-linux-ln-exp/</guid>
      <description>用慘痛教訓換來經驗
常常使用Linux做為系統的工程師應該都不陌生ln這個指令
ln是對資料夾建立超連結的指令
以下範例
root@David-MacBook: ~ -&amp;gt; cd /tmp
root@David-MacBook: tmp -&amp;gt; ln -s /opt/web/home/
  第一行cd切換目錄到/tmp
第二行是建立超連結到當前目錄（/tmp）並指向/opt/web/home
會得到結果
root@David-MacBook: tmp -&amp;gt; ll
total 0
lrwxr-xr-x 1 root wheel 14 Jan 25 22:59 home -&amp;gt;/opt/web/home 可以看到我們將home這個資料夾成功建立超連結到/tmp
那什麼是超連結？
所謂超連結就是類似windows作業系統的&#34;捷徑&#34;，可以藉由超連結的資料夾讀取與原資料夾資料同步的資料
很難理解嗎？ &amp;nbsp; 其實就是資料夾的影分身這麼簡單而已，主體是同一個。
那ln這麼簡單的指令會出現哪些問題？ 問題可大了
魔鬼藏在細節裡
當你要解除超連結，你會怎麼下指令？ rm吧
對 就是rm，反正直接移除超連結跟windows移除捷徑一樣，真正的資料夾是不會影響的吧
錯！ 大錯特錯！！
root@David-MacBook: tmp -&amp;gt; ll home/
total 0
-rw-r--r-- 1 root whell 0 Jan 25 23:13 test
root@David-MacBook: tmp -&amp;gt; rm -rf home/</description>
    </item>
    
  </channel>
</rss>